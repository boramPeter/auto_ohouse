import requests
import re,os,time
import io
import PIL.Image
import google.generativeai as genai
from datetime import datetime, timedelta
from qa_mcp_server.slack_func.send_slack_msg import send_slack_message


def run_multiple_analyses(names_list,file_key,scope=None,scope_context=None,desc=None,test_scope_context=None):
    """
    실행 함수만 남겨둡니다.
    """

    collected_responses = []  # 각 main 함수의 결과를 저장할 리스트

    print(f"총 {len(names_list)}개의 분석을 시작합니다: {names_list}")
    print("-" * 50)
    if scope_context is None:
        scope_context = [None] * len(names_list)

    for name, scope_context_item in zip(names_list, scope_context):
        print(f"\n>>> '{name,scope_context_item}'에 대한 분석을 시작합니다...\n")
        # scope용
        scope_initial_text = """### 역할 및 지시문
           당신은 주어진 UI 흐름도와 이미지를 분석하여 테스트 전략과 범위를 수립하는 전문 QA 입니다.

           **당신의 핵심 임무:**
           주어진 [화면 이미지]와 [연결 구조 정보]를 **시각적으로 깊이 분석**하여, 테스트 케이스를 작성하기 전 단계인 **'테스트 범위 정의서(Test Scope Definition)'**를 도출하는 것입니다.

           **분석의 핵심 원칙:**
           * **화면 내부 요소(Intra-Image) 분석:** 각 화면 이미지 안에 있는 버튼, 입력 필드, 텍스트, 아이콘 등을 식별하고 그 목적을 파악합니다.
           * **화면 간 관계(Inter-Image) 분석:** 화면 내부의 특정 UI 요소가 어떤 사용자 행동(트리거)을 통해 다른 화면으로 연결되는지 명확하게 기술합니다.

           ---
           ### 연결 구조 정보
           (아래의 각 연결 설명에서, 텍스트 바로 앞에 있는 이미지가 해당 화면의 실제 모습입니다.)
           """

        scope_final_text = """\n\n---
           ### 테스트 범위 분석 및 정의 요청
           위의 지침과 모든 시각 정보를 아래 항목 기준대로 참고 해서 **'test_scope'**을 도출해 주세요.

           **1. 주요 기능 및 사용자 흐름 식별**
           이 다이어그램에서 식별할 수 있는 핵심적인 사용자 시나리오(User Scenario) 또는 기능 흐름을 목록으로 정리해 주세요. 만약 연결된 흐름이 없다면 화면 이미지 안에 있는 요소들을 중심으로 정리해주세요.

           **2. 화면별 핵심 테스트 범위 정의**
           각 화면(이미지)에 대해 테스트해야 할 핵심 범위를 아래 항목으로 나누어 분석해 주세요.
           * **화면 명:**
           * **핵심 기능:** 이 화면의 주된 목적 또는 사용자가 수행하는 전반적인 기능은 무엇입니까?
           * **주요 UI 요소:** 테스트가 필요한 중요 UI 요소(버튼, 입력 필드, 탭, 링크 등)를 모두 나열하세요.
           * **화면 전환 트리거:** 이 화면에서 다른 화면으로 이동시키는 '연결'이 있다면, 어떤 UI 요소를 어떤 방식으로 조작(클릭, 입력 등)해야 하는지 명시해 주세요. (예: '가입' 버튼 클릭 시 `[연결 설명]`을 통해 `[다음 화면]`으로 이동) 만약 연결된 흐름이 없다면 해당항목은 무시하세요.

           **(모든 화면에 대해 위 항목을 반복하여 작성해 주세요.)**

           **3. 테스트 우선순위 제안**
           식별된 기능 흐름과 화면들을 바탕으로, 어떤 부분을 먼저 테스트해야 할지 P0(High) / P1(Medium) / P2(Low) 우선순위를 나누어 제안하고 그 이유를 간략히 설명해 주세요. 만약 화면 연결 흐름이 없다면, 화면별로 제안해주세요.

           **4. 최종 검토 **
           각 테스트 항목은 누락 없이 정리하되, 보기 좋게 항목별로 답변해줘. 
           작성 전에 반드시 전체 문서를 한 번 더 검토해서 빠진 테스트가 없는지 확인하고, test scope만 정확하고 간결하게 정리해줘.
           마지막으로 이미지 UI요소와 이미지 간의 관계를 기반으로 도출했을때, 누락된 부분이 없는지 최종 검토해봐.
           이미지간의 관계가 없다면, 각 이미지가 누락된게 없는지, 이미지 내의 요소가 누락된 부분이 없는지 최종 검토해봐.
           """
        # scope 종료

        #### scope을 추가해야한다######
        # TC 시작 여기에 scope이랑 figma 시작까지 처리해야한다.#

        TC_initial_text = f"""### 역할 및 지시문
            당신은 주어진 UI 흐름도와 화면별 이미지를 분석해서 테스트케이스를 작성할줄 아는 전문 QA 입니다.

            figma 연결 구조 정보와, 아래의 테스트범위 및 figma 이미지를 바탕으로 요구사항을 구체적으로 커버해주세요. 특히 앱의 경우 다양한 디바이스 해상도 및 OS 버전을 고려하여, 가능한 한 **다양하고 상세한 시나리오**(Positive, Negative, Edge cases 포함)를 만들어주세요.
            ---

            ---
            === 테스트범위 시작 ===
            {scope_context_item}
            === 테스트 범위 종료 ===

            다음은 figma 정보 와 연결 구조 정보 입니다.
             === figma, 연결 구조 정보 시작 ===
            (아래의 각 연결 설명에서, 텍스트 바로 앞에 있는 이미지가 해당 화면의 실제 모습입니다.)
            """

        TC_final_text = """\n\n
           === figma, 연결 구조 정보 종료 ===
           1.  **출력 형식:** 
               테스트 케이스는 아래와 같은 컬럼을 포함하는 **Markdown 표(Table)** 형식으로 정리해주시면 좋겠습니다.

               * `Test Case ID`: 고유 식별자 (예: `PROJ-MYPAGE-001`). figma layer_name 앞 4글자-세 자리 숫자 형식으로 구성합니다.
               * `대상 기능/화면`: 테스트 대상이 되는 기능 또는 화면 명칭 (예: 마이페이지 > 프로필 편집). **가능한 한 구체적인 메뉴 경로**를 포함합니다.
               * `테스트 목적/시나리오`: **사용자 관점에서** 무엇을, 어떤 상황에서 검증하려는지 명확히 기술합니다. (예: 비로그인 사용자가 마이페이지 진입 시 로그인 페이지로 이동하는지 확인).
               * `전제 조건 (Pre-condition)`: 테스트 수행 전 **반드시 충족되어야 하는 명확한 시작 상태**를 기술합니다. (예: `사용자는 'test_user_01' 계정으로 로그인되어 있어야 함`, `장바구니에는 상품 A가 2개 담겨 있어야 함`, `푸시 알림 수신 동의 상태여야 함`). **구체적인 데이터 상태, 사용자 상태, 시스템 설정** 등을 명시합니다.
               * `테스트 경로/절차 (Test Steps)`: 검증을 위한 **구체적인 사용자 행동 단계**를 순차적으로 기술합니다. **어떤 화면에서 시작하여 어떤 경로(메뉴 이동, 버튼 클릭 등)를 통해 어떤 액션을 수행하는지** 명확하고 재현 가능하게 작성합니다.
                   1.  (예: 앱 실행)
                   2.  (예: 하단 탭 바에서 '마이페이지' 선택)
                   3.  (예: '프로필 편집' 버튼 클릭)
                   4.  (예: 닉네임 입력 필드에 'NewNick123' 입력)
                   5.  (예: '저장' 버튼 클릭)
               * `예상 결과 (Expected Result)`: 테스트 절차 수행 후 **시스템(화면, 데이터 등)이 보여야 하는 명확하고 검증 가능한 결과**를 기술합니다. (예: `'닉네임이 성공적으로 변경되었습니다.' 토스트 팝업 노출`, `마이페이지 화면의 닉네임이 'NewNick123'으로 변경되어 표시됨`).
               * `중요도 (Priority)`: 테스트 케이스의 중요도는 P0~P2로 표현합니다. (High = P0, Medium = P1, Low = P2).
               * `플랫폼/환경`: 관련 플랫폼 및 환경 (예: Web (Chrome), iOS (17.x), Android (13+), All, Server). **특정 환경에서만 발생 가능한 경우 명시**합니다.
               * `비고`: 추가적인 설명, PRD 연관 항목 (섹션 번호 등), 또는 **'상세 로직 정의 필요', '디자인 확인 필요'** 등 추가 확인이 필요한 사항을 명시합니다.

           2.  **상세 수준:**
               * QA 엔지니어가 이 문서만 보고도 **별도의 질문 없이 테스트를 수행할 수 있을 정도로 명확하고 상세하게** 작성합니다.
               * 특히 **`전제 조건`과 `테스트 경로/절차`는 누가 수행하더라도 동일한 결과를 얻을 수 있도록 구체적**이어야 합니다.
               * figma 정보에 명시되지 않아 구체화가 어려운 부분은 **`비고`란에 명확히** 표시하여 추후 논의가 가능하도록 합니다.
               * figma 이미지 ui요소와 이미지 간의 관계를 기반으로 작성해야 합니다. 만약, 이미지 관계가 없다면 figma 이미지 내의 UI요소별로 상세하고 자세하게 작성해주세요. 특히, 모든 이미지와 그 이미지 내의 요소가 누락되지 않도록 체크해주세요.


           3.  **테스트케이스 작성 시 지침:**
               * **학습 활용:** 기존 대화에서 테스트 범위를 **최대한 활용**하여 TC를 작성합니다.
               * **경로 및 조건 중심:** 모든 테스트 케이스 작성 시, **'어떤 상태에서(Pre-condition)'** 시작하여 **'어떤 경로를 통해(Test Steps)'** 검증하는지를 **가장 중요하게** 고려합니다.
               * **다각적 접근:** 기능의 **정상 동작(Positive)** 뿐만 아니라, **예외 상황(Negative)**, **경계값/극한 상황(Edge cases)**, **사용성/UI/UX 측면**까지 고려하여 폭넓은 케이스를 도출합니다.
               * **데이터 고려:** 테스트에 필요한 **특정 데이터**(예: 긴 텍스트, 특수 문자, 빈 값, 특정 형식의 데이터)를 `테스트 절차` 또는 `전제 조건`에 명시합니다.
               * **사용자 역할:** 여러 사용자 역할(예: 일반 사용자, 관리자, 신규 사용자)이 있다면, **역할별 시나리오**를 고려합니다.
               * **일관성:** `Test Case ID` 네이밍 규칙 및 표 형식을 일관되게 유지합니다.
               * **최종 결과물:** 작성된 모든 케이스들을 **Markdown이 적용된 하나의 표**로 만들어 한글로 답변합니다.
           """

        try:
            # main 함수 호출하여 결과 받기
            if scope is not None:
                result = main(name,file_key,scope_initial_text,scope_final_text,test_scope=None)
            else:
                result = main(name,file_key,TC_initial_text,TC_final_text,test_scope=scope_context_item,desc=desc)

            # main 함수가 정상적으로 텍스트 결과를 반환했을 경우
            if result:
                collected_responses.append(result)
                print(f"\n>>> '{name}'에 대한 분석 완료. 결과를 저장했습니다.")
            else:
                # main 함수에서 오류가 발생하여 None 등을 반환한 경우
                print(f"\n>>> '{name}'에 대한 분석 실패 또는 결과 없음. 건너뜁니다.")

        except Exception as e:
            # main 함수 실행 중 예측하지 못한 예외가 발생한 경우
            print(f"\n>>> '{name}' 분석 중 심각한 오류 발생: {e}")

        print("-" * 50)

    print("\n모든 분석이 완료되었습니다. 최종 결과를 통합합니다...")
    if test_scope_context is not None:
        final_report = collected_responses
    else:
        # 수집된 모든 응답(문자열)을 "\n\n"으로 연결하여 최종 리포트 생성
        final_report = "\n\n".join(collected_responses)
    return final_report


if __name__ == "__main__":


